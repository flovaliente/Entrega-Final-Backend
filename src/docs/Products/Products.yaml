openapi: 3.0.0
info:
  title: Product API
  version: 1.0.0
  description: API for managing products.

servers:
  - url: http://localhost:8080

paths:
  /api/products:
    get:
      summary: Get all products
      description: Retrieve a list of products with optional pagination, category filtering, search query, and sorting.
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of products per page to return
          required: false
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          description: Filter products by category
          required: false
          schema:
            type: string
        - name: query
          in: query
          description: Search query to filter products by name or description
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sort products by a specific field
          required: false
          schema:
            type: string
      responses:
        200:
          description: A paginate list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        500:
          description: Internal server error
    post:
      summary: Add a new product
      description: Create a new product and store it in the database.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: New Product
                description:
                  type: string
                  example: This is a new product.
                code:
                  type: string
                  example: 001
                price:
                  type: number
                  format: float
                  example: 19.99
                thumbnails:
                  type: array
                  items:
                    type: string
                    format: binary
                category:
                  type: string
                  example: Electronics
      responses:
        200:
          description: Product added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  payload:
                    $ref: '#/components/schemas/Product'
        400:
          description: Bad request, could not add product
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string

  /api/products/{pid}:
    get:
      summary: Get a product by ID
      description: Retrieve a specific product by its ID.
      parameters:
        - name: pid
          in: path
          required: true
          description: The ID of the product
          schema:
            type: string
      responses:
        200:
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
    put:
      summary: Update a product by ID
      description: Update an existing product using its ID.
      parameters:
        - name: pid
          in: path
          required: true
          description: The ID of the product
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Product
                description:
                  type: string
                  example: Updated description of the product.
                price:
                  type: number
                  format: float
                  example: 29.99
                thumbnails:
                  type: array
                  items:
                    type: string
                    format: binary
                category:
                  type: string
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  payload:
                    $ref: '#/components/schemas/Product'
        400:
          description: Bad request, could not update product
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string

    delete:
      summary: Delete a product by ID
      description: Delete a specific product using its ID.
      parameters:
        - name: pid
          in: path
          required: true
          description: The ID of the product
          schema:
            type: string
      responses:
        200:
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Product successfully deleted.
        403:
          description: Permission denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: objectid  # Custom format for MongoDB ObjectId
          description: Unique identifier of the cart
        title:
          type: string
        description:
          type: string
        code:
          type: string
        price:
          type: number
        status:
          type: string
          description: True or false
        stock:
          type: number
          description: The aviable stock of the product on store
        category:
          type: string
        thumbnails:
          type: array
          items:
            type: string
        owner:
          type: string
          description: The email of the creator of the product
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
